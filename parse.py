import fitz  # PyMuPDF
import docx
import os
from PIL import Image
import io
from pptx import Presentation
from pptx.util import Inches, Pt

def extract_text_from_pdf(file_path):
    doc = fitz.open(file_path)
    text = ""
    for page in doc:
        text += page.get_text()
    doc.close()
    return text

def extract_images_from_pdf(file_path, output_folder="pdf_images"):
    os.makedirs(output_folder, exist_ok=True)
    doc = fitz.open(file_path)
    image_paths = []
    for page_index in range(len(doc)):
        for img_index, img in enumerate(doc.get_page_images(page_index)):
            xref = img[0]
            base_image = doc.extract_image(xref)
            image_bytes = base_image["image"]
            image_ext = base_image["ext"]
            image_path = os.path.join(output_folder, f"page{page_index+1}_img{img_index+1}.{image_ext}")
            with open(image_path, "wb") as f:
                f.write(image_bytes)
            image_paths.append(image_path)
    return image_paths

def extract_text_from_docx(file_path):
    doc = docx.Document(file_path)
    text = []
    for para in doc.paragraphs:
        if para.text.strip():
            text.append(para.text.strip())
    return "\n".join(text)

def extract_images_from_docx(file_path, output_folder="docx_images"):
    from docx.image.image import Image as DocxImage
    os.makedirs(output_folder, exist_ok=True)
    doc = docx.Document(file_path)
    image_paths = []
    for i, rel in doc.part._rels.items():
        if "image" in rel.target_ref:
            image_data = rel.target_part.blob
            ext = rel.target_ref.split('.')[-1]
            image_path = os.path.join(output_folder, f"image_{len(image_paths)+1}.{ext}")
            with open(image_path, "wb") as f:
                f.write(image_data)
            image_paths.append(image_path)
    return image_paths

def extract_text_and_images(file_path,save_text_to_file=True):
    if file_path.endswith('.pdf'):
        text = extract_text_from_pdf(file_path)
        images = extract_images_from_pdf(file_path)
    elif file_path.endswith('.docx'):
        text = extract_text_from_docx(file_path)
        images = extract_images_from_docx(file_path)
        tables = extract_tables_from_docx(file_path)
    else:
        raise ValueError("Unsupported file type. Only .pdf and .docx are supported.")
    
    if save_text_to_file:
        base_name = os.path.splitext(os.path.basename(file_path))[0]
        text_output_path = f"{base_name}_extracted.txt"
        with open(text_output_path, "w", encoding="utf-8") as f:
            f.write(text)
        print(f"✅ Extracted text saved to {text_output_path}")

    
    return text, images, tables

def get_image_paths_from_folder(folder_path):
    valid_exts = ('.png', '.jpg', '.jpeg', '.bmp')
    image_paths = [
        os.path.join(folder_path, f)
        for f in os.listdir(folder_path)
        if f.lower().endswith(valid_exts)
    ]
    # Optional: Sort by filename (e.g., page1_img1.png < page2_img1.png)
    return sorted(image_paths)

def extract_tables_from_docx(file_path):
    doc = docx.Document(file_path)
    tables_data = []

    for table in doc.tables:
        table_content = []
        for row in table.rows:
            row_content = [cell.text.strip() for cell in row.cells]
            table_content.append(row_content)
        tables_data.append(table_content)

    return tables_data


def create_presentation(title_text, slide_contents, image_paths, table_data, output_path="output.pptx"):
    # Initialize presentation
    prs = Presentation()

    # --- Title Slide ---
    title_slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = title_text
    subtitle.text = "Generated by SmartSlideGen ✨"

    # --- Content Slides ---
    for i, content in enumerate(slide_contents):
        slide_layout = prs.slide_layouts[1]  # Title + Content layout
        slide = prs.slides.add_slide(slide_layout)
        title = slide.shapes.title
        content_box = slide.placeholders[1]

        title.text = content.get("title", f"Slide {i+1}")
        content_box.text = content.get("body", "")

        # Add an image if available
        if i < len(image_paths):
            left = Inches(5.5)  # right side
            top = Inches(1.5)
            height = Inches(3.5)
            try:
                slide.shapes.add_picture(image_paths[i], left, top, height=height)
            except Exception as e:
                print(f"⚠️ Could not add image {image_paths[i]}: {e}")

    # --- Table Slides ---
    for idx, table in enumerate(table_data):
        slide_layout = prs.slide_layouts[5]  # Title Only Layout
        slide = prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = f"Table {idx+1}"

        # Define table dimensions
        rows = len(table)
        cols = len(table[0]) if table else 0

        if rows > 0 and cols > 0:
            left = Inches(0.5)
            top = Inches(1.5)
            width = Inches(9)
            height = Inches(5)

            table_shape = slide.shapes.add_table(rows, cols, left, top, width, height).table

            # Fill table content
            for r in range(rows):
                for c in range(cols):
                    table_shape.cell(r, c).text = str(table[r][c])

                    # Optional: make font smaller for large tables
                    for paragraph in table_shape.cell(r, c).text_frame.paragraphs:
                        for run in paragraph.runs:
                            run.font.size = Pt(10)

    # Save presentation
    prs.save(output_path)
    print(f"✅ Presentation saved to {output_path}")



# Example usage
if __name__ == "__main__":

    file_path = "docs/temp_with_tables.pdf"  # Change this to your input file

    if os.path.exists(file_path):

        text, images, tables = extract_text_and_images(file_path)
        
        print(f"✅ {len(images)} Images Extracted")
        print(f"✅ {len(tables)} Tables Extracted")


    else:
        print("File not found.")

    slide_data = [
        {"title": "Overview", "body": "This presentation covers insights from the uploaded document."},
        {"title": "Key Takeaways", "body": "1. Point one\n2. Point two\n3. Point three"},
        {"title": "Conclusion", "body": "The document highlights several important trends..."}
    ]

    # Dynamically get images from a folder
    image_folder = "pdf_images"  # change to your actual folder
    image_files = get_image_paths_from_folder(image_folder)

    # Create the PPT
    create_presentation("Sample Report Summary", slide_data, image_files, tables)

    
    # print("Extracted Tables:")
    # for i, table in enumerate(tables):
    #     print(f"Table {i+1}:")
    #     for row in table:
    #         print(row)
    #     print("\n")